Time:        44     82     69     81
Distance:   202   1076   1138   1458

import re
from functools import reduce
from itertools import chain
from collections import namedtuple

Interval = namedtuple("Interval", ["start", "length"])


def parse_nums(line):
    return [int(x) for x in re.findall(r"\d+", line)]


def parse_almanac(almanac):
    seed_line, *rule_sections = almanac.read().split("\n\n")

    seeds = parse_nums(seed_line)
    rules = [
        [parse_nums(line) for line in section.split("\n")[1:]]
        for section in rule_sections
    ]

    return seeds, rules


def map_interval(interval, mappings):
    if interval.length == 0:
        return []

    for dst, src, len in mappings:
        offset = interval.start - src
        if offset in range(len):
            cut = min(len - offset, interval.length)
            mapped_interval = Interval(dst + offset, cut)
            leftover_interval = Interval(
                interval.start + cut, interval.length - cut
            )
            return [mapped_interval] + map_interval(leftover_interval, mappings)

    return [interval]


def propogate(intervals, mappings):
    if not intervals:
        return []
    
    interval, *intervals = intervals
    return map_interval(interval, mappings) + propogate(intervals, mappings)


if __name__ == "__main__":
    with open("data.in") as almanac:
        seeds, rules = parse_almanac(almanac)

    

    seed_intervals = [
        Interval(start, length)
        for start, length in zip(seeds[0::2], seeds[1::2])
    ]

    location_intervals = reduce(propogate, rules, seed_intervals)
    print(min(interval.start for interval in location_intervals))